var lvl = parseInt(localStorage.level) - 1;

$(document).ready(function () {

    $('.num').html(lvl + 1);

    var allGivens = [
    ['11', '13', '14', '15', '17', '27', '28', '29', '31', '32', '36', '42', '44', '48', '49', '52', '53', '54', '56', '57', '58', '61', '62', '66', '68', '74', '78', '79', '81', '82', '83', '93', '95', '96', '97', '99'],
    ['11', '14', '15', '17', '27', '33', '34', '36', '38', '42', '53', '54', '55', '56', '57', '68', '72', '74', '76', '77', '83', '93', '95', '96', '99'],
    ['12', '18', '23', '25', '27', '32', '34', '36', '38', '42', '44', '46', '48', '51', '52', '58', '59', '62', '64', '66', '68', '72', '74', '76', '78', '83', '85', '87', '92', '98'],
    ['16', '17', '19', '22', '24', '28', '32', '37', '43', '44', '47', '51', '52', '58', '59', '63', '66', '67', '73', '78', '82', '86', '88', '91', '93', '94'],
    ['11', '15', '17', '19', '21', '26', '27', '33', '35', '37', '41', '46', '47', '48', '62', '63', '64', '69', '73', '75', '77', '83', '84', '89', '91', '93', '95', '99'],
    ['11', '14', '18', '22', '27', '31', '35', '36', '37', '45', '46', '49', '61', '64', '65', '73', '74', '75', '79', '82', '88', '91', '96', '99'],
    ['11', '13', '14', '17', '22', '25', '28', '29', '33', '35', '36', '38', '42', '43', '48', '49', '51', '54', '56', '59', '61', '62', '67', '68', '72', '74', '75', '77', '81', '82', '85', '88', '93', '96', '97', '99'],
    [13, 16, 22, 24, 25, 32, 35, 38, 39, 41, 46, 51, 52, 58, 59, 64, 69, 71, 72, 75, 78, 85, 86, 88, 94, 97],
    [11, 13, 24, 25, 28, 31, 36, 38, 44, 45, 48, 49, 51, 59, 61, 62, 65, 66, 72, 74, 79, 82, 85, 86, 97, 99],
    [12, 15, 17, 23, 26, 28, 29, 32, 34, 36, 37, 43, 45, 46, 47, 49, 52, 54, 56, 58, 61, 63, 64, 65, 67, 73, 74, 76, 78, 81, 82, 84, 87, 93, 95, 98],
    [12, 18, 19, 26, 27, 32, 33, 35, 41, 42, 45, 46, 49, 51, 59, 61, 64, 65, 68, 69, 75, 77, 78, 83, 84, 91, 92, 98],
    [12, 15, 16, 19, 21, 26, 33, 34, 35, 38, 41, 46, 48, 62, 64, 69, 72, 75, 76, 77, 84, 89, 91, 94, 95, 98],
    [13, 17, 18, 19, 27, 29, 35, 36, 41, 44, 45, 47, 49, 54, 56, 61, 63, 65, 66, 69, 74, 75, 81, 83, 91, 92, 93, 97],
    [11, 14, 15, 17, 19, 22, 23, 24, 25, 28, 32, 33, 35, 39, 44, 48, 49, 53, 57, 61, 62, 66, 71, 75, 77, 78, 82, 85, 86, 87, 88, 91, 93, 95, 96, 99],
    [12, 17, 18, 21, 29, 34, 36, 38, 39, 44, 45, 47, 52, 58, 63, 65, 66, 71, 72, 74, 76, 81, 89, 92, 93, 98],
    [11, 19, 23, 24, 26, 27, 33, 34, 36, 37, 42, 44, 46, 48, 51, 59, 62, 64, 66, 68, 73, 74, 76, 77, 83, 84, 86, 87, 91, 99],
    [13, 15, 17, 21, 29, 33, 34, 36, 37, 41, 43, 44, 46, 47, 49, 61, 63, 64, 66, 67, 69, 73, 74, 76, 77, 81, 89, 93, 95, 97],
    [11, 14, 15, 19, 23, 26, 27, 32, 34, 38, 39, 41, 42, 45, 46, 47, 51, 53, 57, 59, 63, 64, 65, 68, 69, 71, 72, 76, 78, 83, 84, 87, 91, 95, 96, 99],
    [13, 15, 18, 21, 22, 24, 27, 32, 36, 39, 42, 51, 53, 57, 59, 68, 71, 74, 78, 83, 86, 88, 89, 92, 95, 97],
    [11, 13, 17, 19, 31, 34, 35, 36, 39, 41, 43, 44, 46, 47, 49, 61, 63, 64, 66, 67, 69, 71, 74, 75, 76, 79, 91, 93, 97, 99],
    [12, 13, 14, 18, 21, 22, 26, 28, 29, 34, 36, 39, 42, 43, 45, 47, 49, 54, 56, 61, 63, 65, 67, 68, 71, 74, 76, 81, 82, 84, 88, 89, 92, 96, 97, 98],
    [13, 14, 22, 25, 26, 28, 33, 37, 39, 42, 44, 46, 49, 52, 58, 61, 64, 66, 68, 71, 73, 77, 82, 84, 85, 88, 96, 97],
    [12, 16, 17, 18, 22, 23, 26, 31, 32, 35, 37, 38, 46, 48, 52, 58, 62, 64, 72, 73, 75, 78, 79, 84, 87, 88, 92, 93, 94, 98],
    [14, 18, 22, 23, 25, 27, 34, 37, 45, 49, 52, 53, 57, 58, 61, 65, 73, 76, 83, 85, 87, 88, 92, 96],
    [11, 14, 16, 19, 21, 29, 32, 34, 36, 38, 41, 43, 47, 49, 52, 53, 57, 58, 61, 63, 67, 69, 72, 74, 76, 78, 81, 89, 91, 94, 96, 99],
    [11, 18, 26, 27, 28, 29, 34, 36, 37, 48, 51, 53, 55, 57, 59, 62, 73, 74, 76, 81, 82, 83, 84, 92, 99],
    [11, 12, 19, 23, 24, 25, 27, 28, 36, 37, 39, 43, 45, 46, 47, 48, 51, 52, 58, 59, 62, 63, 64, 65, 67, 71, 73, 74, 82, 83, 85, 86, 87, 91, 98, 99],
    [12, 19, 24, 25, 29, 33, 35, 37, 46, 47, 48, 51, 59, 62, 63, 64, 73, 75, 77, 81, 84, 86, 91, 98],
    [12, 13, 17, 18, 21, 25, 29, 32, 38, 41, 44, 46, 49, 52, 58, 61, 64, 66, 69, 72, 78, 81, 85, 89, 92, 93, 97, 98],
    [12, 14, 16, 23, 24, 25, 29, 33, 34, 36, 37, 38, 41, 43, 47, 48, 49, 52, 58, 61, 62, 63, 67, 69, 72, 73, 74, 76, 77, 81, 85, 86, 87, 94, 96, 98],
    [12, 13, 17, 18, 21, 22, 24, 26, 28, 29, 31, 35, 39, 44, 46, 53, 57, 64, 66, 71, 75, 79, 81, 82, 84, 86, 88, 89, 92, 93, 97, 98],
    [13, 15, 17, 18, 22, 25, 32, 34, 41, 44, 45, 47, 49, 61, 63, 65, 66, 69, 76, 78, 84, 88, 92, 93, 95, 97],
    [12, 14, 16, 18, 23, 25, 27, 31, 39, 41, 45, 49, 53, 55, 57, 61, 65, 69, 71, 79, 83, 85, 87, 92, 94, 96, 98],
    [11, 12, 13, 17, 22, 24, 26, 28, 29, 34, 35, 39, 41, 42, 45, 46, 52, 53, 57, 58, 64, 65, 68, 69, 71, 75, 76, 81, 82, 84, 86, 88, 93, 97, 98, 99],
    [11, 14, 16, 19, 25, 32, 33, 34, 36, 37, 38, 43, 47, 52, 58, 63, 67, 72, 73, 74, 76, 77, 78, 85, 91, 94, 96, 99],
    [15, 21, 22, 28, 29, 33, 34, 36, 37, 42, 43, 47, 48, 51, 54, 56, 59, 62, 63, 67, 68, 73, 74, 76, 77, 81, 82, 88, 89, 95],
    [11, 19, 23, 24, 26, 27, 31, 34, 35, 36, 39, 43, 44, 46, 47, 52, 58, 63, 64, 66, 67, 71, 74, 75, 76, 79, 83, 84, 86, 87, 91, 99],
    [13, 14, 17, 24, 25, 26, 31, 33, 34, 35, 37, 39, 42, 47, 48, 49, 52, 53, 55, 57, 58, 61, 62, 63, 68, 71, 73, 75, 76, 77, 79, 84, 85, 86, 93, 96, 97],
    [14, 16, 19, 21, 25, 28, 29, 39, 42, 46, 48, 53, 54, 56, 57, 62, 64, 68, 71, 81, 82, 85, 89, 91, 94, 96],
    [14, 18, 21, 24, 26, 27, 32, 33, 37, 42, 44, 46, 48, 49, 61, 62, 64, 66, 68, 73, 77, 78, 83, 84, 86, 89, 92, 96],
    [12, 15, 18, 22, 24, 26, 28, 31, 34, 36, 39, 41, 49, 51, 53, 57, 59, 61, 69, 71, 74, 76, 79, 82, 84, 86, 88, 92, 95, 98],
    [11, 15, 19, 24, 26, 31, 32, 35, 38, 39, 43, 47, 51, 59, 63, 67, 71, 72, 75, 78, 79, 84, 86, 91, 95, 99],
    [11, 15, 16, 19, 22, 24, 26, 27, 28, 32, 33, 36, 37, 41, 42, 43, 48, 51, 55, 59, 62, 67, 68, 69, 73, 74, 77, 78, 82, 83, 84, 86, 88, 91, 94, 95, 99],
    [11, 17, 19, 22, 24, 25, 28, 31, 35, 36, 43, 48, 52, 53, 55, 57, 58, 62, 67, 74, 75, 79, 82, 85, 86, 88, 91, 93, 99],
    [14, 15, 16, 23, 25, 27, 31, 39, 42, 43, 44, 46, 47, 48, 55, 62, 63, 64, 66, 67, 68, 71, 79, 83, 85, 87, 94, 95, 96],
    [12, 14, 18, 23, 24, 26, 28, 34, 35, 43, 48, 49, 51, 59, 61, 62, 67, 75, 76, 82, 84, 86, 87, 92, 96, 98],
    [11, 12, 17, 18, 19, 23, 25, 26, 33, 34, 36, 38, 44, 48, 49, 52, 53, 54, 56, 57, 58, 61, 62, 66, 72, 74, 76, 77, 84, 85, 87, 91, 92, 93, 98, 99],
    [12, 13, 16, 18, 24, 26, 29, 36, 37, 41, 42, 45, 51, 59, 65, 68, 69, 73, 74, 81, 84, 86, 92, 94, 97, 98],
    [12, 14, 16, 18, 23, 27, 31, 39, 42, 44, 46, 48, 51, 59, 62, 64, 66, 68, 71, 79, 83, 87, 92, 94, 96, 98],
    [12, 14, 17, 18, 23, 31, 35, 36, 38, 46, 47, 48, 51, 53, 54, 56, 57, 59, 62, 63, 64, 72, 74, 75, 79, 87, 92, 93, 96, 98],
];
    var allValues = [[2, 7, 5, 3, 6, 1, 2, 4, 6, 8, 9, 6, 3, 8, 9, 3, 8, 6, 7, 2, 5, 4, 5, 1, 7, 2, 4, 3, 1, 4, 9, 6, 9, 5, 8, 7],
    [2, 7, 8, 6, 9, 6, 3, 4, 1, 1, 8, 6, 3, 5, 1, 7, 5, 9, 2, 4, 7, 3, 7, 8, 5],
    [2, 7, 9, 7, 3, 3, 4, 6, 9, 4, 5, 2, 8, 6, 5, 1, 4, 9, 7, 1, 6, 7, 2, 8, 3, 1, 5, 2, 8, 5],
    [3, 1, 9, 3, 8, 5, 5, 6, 1, 7, 4, 3, 9, 6, 7, 2, 6, 5, 8, 1, 6, 9, 2, 5, 9, 4],
    [4, 7, 2, 5, 2, 1, 8, 7, 3, 1, 8, 2, 4, 3, 5, 3, 7, 1, 4, 5, 3, 6, 1, 9, 5, 8, 4, 2],
    [2, 6, 7, 9, 5, 8, 1, 2, 9, 2, 1, 5, 5, 3, 6, 9, 5, 8, 4, 4, 3, 1, 7, 9],
    [8, 3, 7, 5, 6, 3, 2, 1, 5, 4, 9, 6, 5, 2, 8, 9, 9, 3, 1, 7, 1, 7, 6, 5, 4, 6, 9, 8, 5, 3, 2, 7, 1, 8, 4, 2],
    [6, 7, 5, 6, 3, 2, 1, 6, 5, 8, 5, 2, 4, 5, 3, 7, 8, 6, 9, 4, 2, 6, 1, 4, 3, 5],
    [7, 3, 8, 5, 1, 9, 7, 3, 5, 1, 6, 2, 2, 5, 5, 9, 7, 4, 8, 7, 3, 4, 2, 1, 1, 6],
    [3, 9, 7, 5, 3, 4, 9, 2, 1, 6, 8, 6, 5, 8, 1, 3, 7, 2, 9, 5, 5, 4, 3, 1, 6, 3, 7, 4, 1, 6, 4, 9, 5, 9, 8, 2],
    [9, 7, 1, 3, 8, 7, 2, 6, 9, 8, 3, 7, 2, 4, 7, 3, 5, 2, 6, 9, 7, 5, 1, 4, 1, 1, 5, 4],
    [5, 3, 6, 7, 4, 9, 6, 7, 4, 3, 3, 4, 1, 6, 8, 4, 2, 8, 7, 9, 4, 1, 9, 1, 5, 8],
    [8, 1, 9, 2, 8, 6, 6, 5, 1, 6, 7, 5, 3, 1, 8, 6, 9, 5, 3, 7, 7, 8, 3, 4, 8, 9, 7, 2],
    [4, 7, 9, 1, 5, 2, 9, 6, 1, 7, 1, 3, 8, 6, 1, 2, 7, 8, 3, 1, 5, 4, 2, 4, 9, 5, 3, 5, 6, 4, 1, 8, 5, 3, 1, 2],
    [5, 6, 2, 7, 1, 6, 3, 4, 7, 8, 1, 9, 3, 7, 4, 7, 2, 2, 7, 1, 5, 9, 2, 4, 8, 1],
    [2, 1, 7, 8, 2, 4, 9, 6, 1, 2, 2, 9, 6, 3, 6, 4, 5, 1, 3, 6, 6, 7, 5, 8, 1, 2, 8, 6, 5, 9],
    [6, 8, 9, 1, 8, 9, 7, 4, 1, 8, 1, 5, 6, 2, 3, 5, 2, 4, 3, 8, 7, 4, 8, 7, 6, 3, 9, 7, 9, 5],
    [2, 4, 7, 9, 1, 6, 3, 8, 3, 4, 5, 5, 6, 1, 2, 8, 9, 3, 1, 4, 7, 9, 4, 6, 2, 1, 5, 4, 8, 2, 8, 4, 7, 5, 9, 6],
    [5, 9, 3, 8, 6, 2, 9, 3, 5, 8, 8, 3, 1, 2, 9, 4, 1, 9, 6, 7, 6, 5, 3, 4, 1, 8],
    [8, 2, 4, 5, 1, 7, 4, 2, 8, 5, 1, 9, 4, 2, 6, 6, 4, 2, 3, 9, 7, 9, 3, 5, 8, 4, 2, 7, 6, 3],
    [2, 5, 9, 7, 4, 3, 8, 9, 6, 6, 3, 4, 1, 6, 9, 3, 5, 2, 5, 7, 9, 3, 1, 4, 8, 7, 4, 5, 6, 1, 2, 7, 4, 2, 9, 5],
    [3, 8, 2, 6, 1, 3, 4, 2, 8, 3, 4, 6, 7, 5, 2, 6, 5, 3, 4, 2, 9, 6, 1, 2, 3, 9, 9, 5],
    [4, 9, 7, 1, 3, 1, 5, 6, 7, 8, 3, 2, 6, 5, 2, 9, 8, 2, 5, 4, 7, 8, 3, 5, 9, 7, 1, 7, 6, 4],
    [4, 5, 5, 6, 1, 7, 2, 1, 9, 7, 4, 1, 6, 2, 2, 8, 3, 8, 7, 5, 2, 1, 9, 1],
    [9, 1, 5, 8, 4, 9, 6, 3, 9, 7, 7, 6, 8, 2, 1, 5, 6, 4, 2, 8, 3, 5, 7, 5, 1, 2, 5, 6, 1, 9, 2, 4],
    [7, 2, 1, 5, 9, 8, 5, 2, 7, 7, 4, 8, 9, 6, 3, 6, 1, 9, 8, 8, 4, 7, 1, 3, 4],
    [2, 3, 6, 4, 3, 9, 8, 1, 5, 9, 7, 5, 8, 1, 7, 6, 9, 4, 2, 5, 6, 7, 4, 5, 3, 6, 1, 7, 9, 2, 3, 8, 6, 5, 4, 8],
    [4, 2, 8, 7, 6, 3, 9, 7, 3, 8, 1, 4, 9, 1, 9, 6, 8, 3, 4, 9, 4, 1, 7, 5],
    [4, 9, 7, 3, 2, 5, 4, 7, 2, 7, 6, 8, 9, 9, 1, 6, 1, 9, 8, 2, 5, 1, 8, 3, 6, 7, 2, 8],
    [5, 4, 2, 6, 7, 9, 3, 8, 1, 3, 7, 2, 1, 5, 9, 7, 8, 6, 3, 7, 4, 2, 5, 6, 2, 3, 9, 1, 4, 9, 7, 6, 1, 2, 8, 6],
    [1, 8, 9, 7, 6, 2, 8, 9, 5, 4, 4, 6, 3, 9, 3, 1, 2, 4, 7, 9, 7, 2, 8, 7, 3, 6, 9, 1, 4, 5, 6, 3],
    [9, 4, 6, 5, 8, 2, 6, 7, 3, 6, 2, 8, 4, 6, 4, 5, 3, 1, 6, 7, 4, 8, 3, 5, 7, 1],
    [8, 3, 7, 6, 6, 1, 4, 1, 2, 6, 8, 1, 3, 9, 6, 8, 7, 3, 9, 7, 8, 6, 2, 2, 5, 9, 3],
    [4, 5, 3, 7, 7, 5, 2, 9, 4, 4, 8, 5, 6, 3, 9, 1, 2, 1, 4, 6, 8, 4, 3, 1, 5, 6, 8, 9, 1, 7, 3, 4, 7, 1, 2, 6],
    [8, 7, 5, 1, 6, 5, 4, 1, 2, 8, 3, 5, 3, 9, 4, 1, 6, 6, 8, 4, 1, 5, 7, 7, 4, 6, 8, 2],
    [9, 9, 3, 2, 5, 2, 4, 3, 1, 9, 3, 2, 4, 2, 9, 1, 7, 5, 6, 3, 9, 4, 5, 6, 9, 6, 7, 1, 2, 2],
    [1, 9, 2, 8, 9, 7, 9, 3, 2, 1, 5, 6, 1, 5, 2, 8, 6, 4, 7, 6, 3, 7, 2, 4, 8, 6, 5, 9, 7, 8, 8, 4],
    [6, 8, 3, 6, 1, 5, 4, 9, 7, 2, 8, 1, 4, 2, 1, 8, 2, 1, 5, 6, 7, 7, 6, 3, 9, 5, 8, 3, 1, 7, 6, 9, 7, 6, 2, 8, 1],
    [9, 6, 1, 5, 2, 6, 8, 5, 3, 4, 5, 5, 3, 7, 6, 9, 8, 7, 3, 6, 7, 4, 2, 8, 5, 2],
    [6, 8, 1, 4, 5, 6, 7, 5, 1, 9, 2, 4, 6, 7, 8, 5, 3, 1, 4, 8, 9, 7, 4, 1, 2, 3, 1, 8],
    [2, 8, 1, 9, 7, 2, 6, 7, 9, 6, 2, 1, 3, 3, 5, 7, 9, 9, 4, 8, 2, 3, 5, 5, 1, 4, 3, 4, 9, 7],
    [9, 4, 8, 9, 2, 3, 7, 5, 9, 1, 5, 1, 4, 7, 7, 8, 8, 9, 1, 5, 4, 6, 4, 6, 2, 3],
    [9, 7, 1, 4, 1, 3, 4, 5, 6, 5, 8, 2, 1, 3, 2, 7, 1, 1, 6, 8, 8, 3, 5, 2, 9, 1, 6, 2, 7, 6, 9, 8, 3, 2, 4, 5, 7],
    [4, 6, 9, 2, 6, 8, 4, 8, 3, 4, 3, 7, 1, 5, 6, 3, 2, 7, 9, 7, 1, 5, 6, 2, 5, 3, 7, 8, 6],
    [3, 8, 5, 5, 7, 8, 4, 6, 5, 3, 1, 7, 4, 2, 3, 2, 7, 9, 8, 6, 5, 5, 7, 6, 9, 1, 6, 5, 1],
    [5, 4, 9, 1, 7, 8, 4, 5, 2, 3, 6, 2, 9, 4, 6, 2, 9, 8, 7, 9, 6, 1, 8, 6, 2, 7],
    [4, 1, 2, 5, 9, 6, 5, 7, 8, 4, 9, 1, 5, 8, 3, 5, 4, 9, 6, 1, 7, 2, 6, 8, 7, 8, 4, 5, 2, 7, 3, 1, 4, 2, 6, 7],
    [2, 9, 3, 5, 8, 7, 9, 4, 2, 8, 3, 7, 5, 1, 4, 9, 5, 6, 4, 2, 7, 6, 5, 1, 6, 2],
    [4, 3, 9, 7, 3, 4, 2, 1, 7, 9, 8, 2, 9, 7, 1, 6, 3, 4, 1, 5, 9, 2, 3, 2, 5, 6],
    [5, 8, 6, 1, 8, 1, 3, 9, 5, 4, 2, 6, 4, 7, 5, 2, 3, 1, 8, 6, 1, 6, 2, 9, 5, 7, 2, 3, 5, 9]
];

    // Initialize some variables
    var rows = [];
    var columns = [];
    var squares = [];
    var duplicates = [];

    var givens = allGivens[lvl];
    var values = allValues[lvl];

    var timeSec = 0;

    // for adding the appropriate border
    var rightButtons = [];
    var bottomButtons = [];

    function init() {
        // Add some functionalities to the Array prototype
        my_lib.augmentArray();

        getRowsColsSquares();

        $('#home').click(function() {
            window.location = window.location.href.slice(0, 53).concat('index.html');
        });

        // render all the buttons
        board = new Board(givens, values);
        board.renderBoard();
        interval = setInterval(changeTime, 1000);
        interval2 = setInterval(function () {
            $('#timer').html(getTime(timeSec));
        }, 1000)
    }

    function getRowsColsSquares() {
        // Get the buttons in the same row, column or square
        var squareCounter = 0, rowCounter = 0;
        for (var i = 0; i < 9; i++) {
            for (var j = 0; j < 9; j++) {
                var index = '' + (i + 1) + (j + 1);
                // append to the rows array
                rows[i] = rows[i] || [];
                rows[i].push(index);

                // append to the columns array
                columns[j] = columns[j] || [];
                columns[j].push(index);

                // get the squares
                squares[squareCounter] = squares[squareCounter] || [];
                squares[squareCounter].push(index);

                if ((j + 1) % 3 === 0) {
                    if (j !== 8) {
                        rightButtons.push(index);
                    }
                    squareCounter++;
                }

                if ((rowCounter + 1) % 3 == 0) {
                    if (i !== 8) {
                        bottomButtons.push(index);
                    }
                }
            }
            rowCounter++;
            if (squares[squareCounter - 1].length === 9) {
                rowCounter = 0;
                continue;
            }
            squareCounter -= 3;
        }
    }

    // A constructor for buttons
    function Button(value, id) {
        this.render = function () {
            var classes = '';

            // add background-color
            if (givens.inArray(id)) {
                classes += 'w3-gray w3-hover-gray';
            }
            else {
                classes += 'w3-white w3-hover-light-gray';
            }

            // add border
            if (rightButtons.inArray(id)) {
                classes += ' my-right-btn';
            }

            if (bottomButtons.inArray(id)) {
                classes += ' my-bottom-btn';
            }

            return '<input type="button" class="w3-right-btn w3-button ' + classes + '" value="' + value + '" id="btn-' + id + '"/>';
        }
    }

    // A constructor for the entire board
    function Board(givens, values) {
        this.renderBoard = function () {
            counter = 0;
            for (var i = 1; i <= 9; i++) {
                for (var j = 1; j <= 9; j++) {
                    var index = '' + i + j;
                    if (givens.inArray(index)) {
                        var button = new Button(values[counter], index)
                        $('#game-area').html($('#game-area').html() + button.render());
                        counter++;
                        continue;
                    }
                    var button = new Button('', index);
                    $('#game-area').html($('#game-area').html() + button.render());
                }
                $('#game-area').html($('#game-area').html() + '<br/>');
            }
            addListeners(givens);
        }
    }


    // A constructor for the stack to track user input
    function Stack() {
        this.items = [];
        this.push = function (data) {
            this.items[this.items.length] = data;
        }

        this.pop = function () {
            if (this.isempty()) {
                return;
            }
            result = this.items[this.items.length - 1];
            this.items = this.items.slice(0, this.items.length - 1);
            return result;
        }

        this.peek = function () {
            return this.items[this.items.length - 1];
        }

        this.isempty = function () {
            return this.items.length == 0;
        }

        this.traverse = function () {
            return this.items;
        }
        this.clear = function() {
            this.items = [];
        }
    }

    // Instances of stack to keep track of the user inputs
    var redo = new Stack();
    var undo = new Stack();


    function changeTime() {
        timeSec++;
    }


    // A function to add event handler to all the buttons
    function addListeners(givens) {

        // for the undo and redo buttons
        $('#undo-btn').click(function () {
            if (undo.isempty()) {
                return;
            }
            var c = undo.peek()[0];
            $('#btn-' + undo.peek()[0]).val(undo.peek()[1]);
            redo.push(undo.pop());
            checkDif();
            check(c, 'row');
            check(c, 'column');
            check(c, 'square');
            checkFinished();
        });

        $('#redo-btn').click(function () {
            if (redo.isempty()) {
                console.log('here redo');
                return;
            }
            var c = redo.peek()[0];
            $('#btn-' + redo.peek()[0]).val(redo.peek()[2]);
            undo.push(redo.pop());
            checkDif();
            check(c, 'row');
            check(c, 'column');
            check(c, 'square');
            checkFinished();
        });

        // for the puzzle
        for (var i = 1; i <= 9; i++) {
            for (var j = 1; j <= 9; j++) {
                var index = '' + i + j;
                if (givens.inArray(index)) {
                    continue;
                }
                (function () {
                    var c = index;
                    $('#btn-' + c).click(function () {
                        var value = $(this).val() === '' ? 1 : parseInt($(this).val()) + 1;
                        if (value === 10) {
                            value = '';
                        }
                        var current = $(this).val();
                        $(this).val(value);
                        if (undo.peek() && undo.peek()[0] == c) {
                            current = undo.pop()[1];
                        }
                        undo.push([c, current, value]);
                        redo.clear();
                        checkDif();
                        check(c, 'row');
                        check(c, 'column');
                        check(c, 'square');
                        checkFinished();
                    });
                }());
            }
        }
    }

    function changeBg(btn1, btn2) {
        btn1.addClass('duplicated');
        btn2.addClass('duplicated');
    }

    function checkDif() {
        for (var i = 0; i < duplicates.length; i++) {
            if (duplicates[i][0].val() !== duplicates[i][1].val()) {
                duplicates[i][0].removeClass('duplicated');
                duplicates[i][1].removeClass('duplicated');
                duplicates = duplicates.remove(i);
                i--;
            }
        }
        for (var i = 0; i < duplicates.length; i++) {
            duplicates[i][0].addClass('duplicated');
            duplicates[i][1].addClass('duplicated');
        }
    }


    function check(index, what) {
        switch (what) {
            case 'row':
                var ar = rows;
                break;
            case 'column':
                var ar = columns;
                break;
            default:
                var ar = squares;
        }
        for (var i = 0; i < 9; i++) {
            if (ar[i].inArray(index)) {
                for (var j = 0; j < 9; j++) {
                    var index2 = ar[i][j];
                    if (index === index2) {
                        continue;
                    }
                    if ($('#btn-' + index).val() != '' && ($('#btn-' + index).val() === $('#btn-' + index2).val())) {
                        duplicates.push([$('#btn-' + index), $('#btn-' + index2)]);
                        changeBg($('#btn-' + index), $('#btn-' + index2));
                    }
                }
                break;
            }
        }
    }

    // A function that checks whether the game is finished or not
    // The user has finished when there are no duplicates and there is no empty valued button
    function isFinished() {
        if (duplicates.length !== 0) {
            return false;
        }
        for (var i = 0; i < 9; i++) {
            for (var j = 0; j < 9; j++) {
                if ($('#btn-' + (i + 1) + (j + 1)).val() === '') {
                    return false;
                }
            }
        }
        return true;
    }

    // Changes the bg based on whether the user has finished or not
    function checkFinished() {
        if (isFinished()) {
            clearInterval(interval);
            if(localStorage.bestTime == 0 || parseInt(localStorage.bestTime) > timeSec) {
                localStorage.bestTime = '' + timeSec;
            }
            $('#time').html(getTime(timeSec));
            $('#best-time').html(getTime(parseInt(localStorage.bestTime)));
            $('#message').show();
            if (lvl == allGivens.length - 1) {
                $('#finished-msg').show();
                $('#continue').click(function () {
                    window.location = window.location.href.slice(0, 53).concat('index.html');
                });
                return;
            }
            $('#continue').click(function () {
                localStorage.level = '' + (1 + parseInt(localStorage.level));
                window.location = window.location;
            });
        }
    }

    // initialization
    init();
});
